#nowarn "40"

namespace EulerProblems

open System.Collections.Generic;

module EulerProblems = 

    //Simple memoization
    let memoize f = 
        let cache = new Dictionary<_, _>()
        (fun x -> match cache.TryGetValue(x) with
                  | true, y -> y
                  | _ -> let v = f(x)
                         cache.Add(x, v)
                         v
        )

    //Fibonacci sequence
    let rec fibonacci = 
            memoize (fun n -> 
                            match n with 
                            | 0 -> 0
                            | 1 | 2 -> 1
                            | _ -> fibonacci (n - 1) + fibonacci (n - 2)
            ) 

    //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
    //The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
    let MultiplesOf3And5 n = 
        seq { for i in 0 .. (n - 1) do
                if(i % 3 = 0 || i % 5 = 0) then yield i } |> Seq.sum
    
    let isPrime n = 
        let d = seq { for i in 1L .. n do if n % i = 0L then yield i }
        (d |> Seq.truncate 2 |> Seq.item 1) = n
        

    
    //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    //              1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.    
    let EvenFibonacciNumbers limit =
        let fibSequence = Seq.initInfinite(fun index -> fibonacci index)
        let limitIndex = fibSequence |> Seq.tryFindIndex (fun x -> x > limit)

        match limitIndex with 
        | None -> failwith("Wrong limit chosen")
        | Some x -> fibSequence 
                        |> Seq.truncate x
                        |> Seq.sumBy (fun a -> if (a % 2 = 0) then a else 0)

    //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
    //Find the largest palindrome made from the product of two 3-digit numbers.
    let LargestPalindromeNumber digits = 
        let checkIfPalindrome (number:int) = 
            let stringRepr = string number
            let chars = [ for c in stringRepr do yield c ]
            let revertedChars = chars |> List.rev
            chars = revertedChars
        let max = 10.0 ** digits - 1.0
        let min = 10.0 ** (digits - 1.0)

        [ for i in min .. max do 
                for j in i .. max do
                yield if checkIfPalindrome (int (i * j)) then (i * j) else 0.0
        ] 
        |> List.filter (fun x -> not (x = 0.0))
        |> List.max

    //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    //What is the 10 001st prime number?
    let xThPrime x = 
        let primes = Seq.initInfinite (fun n -> match n with
                                                | 0 -> (0, false)
                                                | 1 -> (1, false)
                                                | _ ->(n, isPrime (int64(n))) )
        primes 
        |> Seq.filter (fun (_, y) -> y = true)
        |> Seq.item (x - 1) //because index starts at 0, and user usually starts at 1

    //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    let SmallestMultiple n = 
        let checkDivisorArray divisors n =
            let result = seq { for d in divisors -> n % d = 0 }
            result |> Seq.forall (fun x -> x = true)

        let array = [for i in 1 .. n -> i ]
        let result = Seq.initInfinite (fun x -> match x with 
                                                | 0 -> (0, false)
                                                | _ -> (x, checkDivisorArray array x))

        result |> Seq.find (fun (_, y) -> y = true)
        


    //The sum of the squares of the first ten natural numbers is,
    //    1^2 + 2^2 + ... + 10^2 = 385
    //The square of the sum of the first ten natural numbers is,
    //    (1 + 2 + ... + 10)^2 = 55^2 = 3025
    //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
    //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    let SumSquareDifference n = 
        let power (i:int) = (float i) ** 2.0
        let array = [|for i in 1 .. n -> i |]
        let sumSquares = array |> Array.map (fun i -> (power i)) |> Array.sum
        let squareSum = 
            let i = array |> Array.sum; 
            power i

        squareSum - sumSquares